package comp5703.sydney.edu.au.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import comp5703.sydney.edu.au.kinderfoodfinder.ProductDatabase.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, String.class, "sid", false, "SID");
        public final static Property Brand_Name = new Property(2, String.class, "Brand_Name", false, "BRAND__NAME");
        public final static Property Available = new Property(3, String.class, "Available", false, "AVAILABLE");
        public final static Property Category = new Property(4, String.class, "Category", false, "CATEGORY");
        public final static Property Image = new Property(5, String.class, "Image", false, "IMAGE");
    }

    private DaoSession daoSession;


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SID\" TEXT," + // 1: sid
                "\"BRAND__NAME\" TEXT," + // 2: Brand_Name
                "\"AVAILABLE\" TEXT," + // 3: Available
                "\"CATEGORY\" TEXT," + // 4: Category
                "\"IMAGE\" TEXT);"); // 5: Image
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PRODUCT_SID ON \"PRODUCT\"" +
                " (\"SID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String Brand_Name = entity.getBrand_Name();
        if (Brand_Name != null) {
            stmt.bindString(3, Brand_Name);
        }
 
        String Available = entity.getAvailable();
        if (Available != null) {
            stmt.bindString(4, Available);
        }
 
        String Category = entity.getCategory();
        if (Category != null) {
            stmt.bindString(5, Category);
        }
 
        String Image = entity.getImage();
        if (Image != null) {
            stmt.bindString(6, Image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String Brand_Name = entity.getBrand_Name();
        if (Brand_Name != null) {
            stmt.bindString(3, Brand_Name);
        }
 
        String Available = entity.getAvailable();
        if (Available != null) {
            stmt.bindString(4, Available);
        }
 
        String Category = entity.getCategory();
        if (Category != null) {
            stmt.bindString(5, Category);
        }
 
        String Image = entity.getImage();
        if (Image != null) {
            stmt.bindString(6, Image);
        }
    }

    @Override
    protected final void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Brand_Name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Available
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBrand_Name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvailable(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
