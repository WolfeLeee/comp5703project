'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require('path');
const os = require('os');
const fs = require('fs');
const uuid = require('uuid');
const opn = require('opn');
const nodemailer = require('nodemailer');
const moment = require('moment');
const pug = require('pug');
const Promise = require('bluebird');

const writeFile = Promise.promisify(fs.writeFile);

const transport = nodemailer.createTransport({
  jsonTransport: true
});

const templateFilePath = path.join(__dirname, '..', 'template.pug');

const renderFilePromise = Promise.promisify(pug.renderFile);

const previewEmail = (() => {
  var _ref = _asyncToGenerator(function* (message, id, open = true, options = { wait: false }) {
    if (typeof message !== 'object') throw new Error('Message argument is required');

    if (!id) id = uuid.v4();

    const res = yield transport.sendMail(message);

    res.message = JSON.parse(res.message);

    const html = yield renderFilePromise(templateFilePath, Object.assign(res.message, {
      cache: true,
      pretty: true,
      moment
    }));

    const filePath = `${os.tmpdir()}/${id}.html`;
    yield writeFile(filePath, html);

    if (open) yield opn(filePath, options);

    return `file://${filePath}`;
  });

  return function previewEmail(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = previewEmail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIm9zIiwiZnMiLCJ1dWlkIiwib3BuIiwibm9kZW1haWxlciIsIm1vbWVudCIsInB1ZyIsIlByb21pc2UiLCJ3cml0ZUZpbGUiLCJwcm9taXNpZnkiLCJ0cmFuc3BvcnQiLCJjcmVhdGVUcmFuc3BvcnQiLCJqc29uVHJhbnNwb3J0IiwidGVtcGxhdGVGaWxlUGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJyZW5kZXJGaWxlUHJvbWlzZSIsInJlbmRlckZpbGUiLCJwcmV2aWV3RW1haWwiLCJtZXNzYWdlIiwiaWQiLCJvcGVuIiwib3B0aW9ucyIsIndhaXQiLCJFcnJvciIsInY0IiwicmVzIiwic2VuZE1haWwiLCJKU09OIiwicGFyc2UiLCJodG1sIiwiT2JqZWN0IiwiYXNzaWduIiwiY2FjaGUiLCJwcmV0dHkiLCJmaWxlUGF0aCIsInRtcGRpciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU1DLEtBQUtELFFBQVEsSUFBUixDQUFYO0FBQ0EsTUFBTUUsS0FBS0YsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFNRyxPQUFPSCxRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU1JLE1BQU1KLFFBQVEsS0FBUixDQUFaO0FBQ0EsTUFBTUssYUFBYUwsUUFBUSxZQUFSLENBQW5CO0FBQ0EsTUFBTU0sU0FBU04sUUFBUSxRQUFSLENBQWY7QUFDQSxNQUFNTyxNQUFNUCxRQUFRLEtBQVIsQ0FBWjtBQUNBLE1BQU1RLFVBQVVSLFFBQVEsVUFBUixDQUFoQjs7QUFFQSxNQUFNUyxZQUFZRCxRQUFRRSxTQUFSLENBQWtCUixHQUFHTyxTQUFyQixDQUFsQjs7QUFFQSxNQUFNRSxZQUFZTixXQUFXTyxlQUFYLENBQTJCO0FBQzNDQyxpQkFBZTtBQUQ0QixDQUEzQixDQUFsQjs7QUFJQSxNQUFNQyxtQkFBbUJmLEtBQUtnQixJQUFMLENBQVVDLFNBQVYsRUFBcUIsSUFBckIsRUFBMkIsY0FBM0IsQ0FBekI7O0FBRUEsTUFBTUMsb0JBQW9CVCxRQUFRRSxTQUFSLENBQWtCSCxJQUFJVyxVQUF0QixDQUExQjs7QUFFQSxNQUFNQztBQUFBLCtCQUFlLFdBQ25CQyxPQURtQixFQUVuQkMsRUFGbUIsRUFHbkJDLE9BQU8sSUFIWSxFQUluQkMsVUFBVSxFQUFFQyxNQUFNLEtBQVIsRUFKUyxFQUtoQjtBQUNILFFBQUksT0FBT0osT0FBUCxLQUFtQixRQUF2QixFQUNFLE1BQU0sSUFBSUssS0FBSixDQUFVLDhCQUFWLENBQU47O0FBRUYsUUFBSSxDQUFDSixFQUFMLEVBQVNBLEtBQUtsQixLQUFLdUIsRUFBTCxFQUFMOztBQUVULFVBQU1DLE1BQU0sTUFBTWhCLFVBQVVpQixRQUFWLENBQW1CUixPQUFuQixDQUFsQjs7QUFFQU8sUUFBSVAsT0FBSixHQUFjUyxLQUFLQyxLQUFMLENBQVdILElBQUlQLE9BQWYsQ0FBZDs7QUFFQSxVQUFNVyxPQUFPLE1BQU1kLGtCQUNqQkgsZ0JBRGlCLEVBRWpCa0IsT0FBT0MsTUFBUCxDQUFjTixJQUFJUCxPQUFsQixFQUEyQjtBQUN6QmMsYUFBTyxJQURrQjtBQUV6QkMsY0FBUSxJQUZpQjtBQUd6QjdCO0FBSHlCLEtBQTNCLENBRmlCLENBQW5COztBQVNBLFVBQU04QixXQUFZLEdBQUVuQyxHQUFHb0MsTUFBSCxFQUFZLElBQUdoQixFQUFHLE9BQXRDO0FBQ0EsVUFBTVosVUFBVTJCLFFBQVYsRUFBb0JMLElBQXBCLENBQU47O0FBRUEsUUFBSVQsSUFBSixFQUFVLE1BQU1sQixJQUFJZ0MsUUFBSixFQUFjYixPQUFkLENBQU47O0FBRVYsV0FBUSxVQUFTYSxRQUFTLEVBQTFCO0FBQ0QsR0E5Qks7O0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBTjs7QUFnQ0FFLE9BQU9DLE9BQVAsR0FBaUJwQixZQUFqQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB1dWlkID0gcmVxdWlyZSgndXVpZCcpO1xuY29uc3Qgb3BuID0gcmVxdWlyZSgnb3BuJyk7XG5jb25zdCBub2RlbWFpbGVyID0gcmVxdWlyZSgnbm9kZW1haWxlcicpO1xuY29uc3QgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5jb25zdCBwdWcgPSByZXF1aXJlKCdwdWcnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG5jb25zdCB3cml0ZUZpbGUgPSBQcm9taXNlLnByb21pc2lmeShmcy53cml0ZUZpbGUpO1xuXG5jb25zdCB0cmFuc3BvcnQgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XG4gIGpzb25UcmFuc3BvcnQ6IHRydWVcbn0pO1xuXG5jb25zdCB0ZW1wbGF0ZUZpbGVQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3RlbXBsYXRlLnB1ZycpO1xuXG5jb25zdCByZW5kZXJGaWxlUHJvbWlzZSA9IFByb21pc2UucHJvbWlzaWZ5KHB1Zy5yZW5kZXJGaWxlKTtcblxuY29uc3QgcHJldmlld0VtYWlsID0gYXN5bmMgKFxuICBtZXNzYWdlLFxuICBpZCxcbiAgb3BlbiA9IHRydWUsXG4gIG9wdGlvbnMgPSB7IHdhaXQ6IGZhbHNlIH1cbikgPT4ge1xuICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICdvYmplY3QnKVxuICAgIHRocm93IG5ldyBFcnJvcignTWVzc2FnZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuXG4gIGlmICghaWQpIGlkID0gdXVpZC52NCgpO1xuXG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRyYW5zcG9ydC5zZW5kTWFpbChtZXNzYWdlKTtcblxuICByZXMubWVzc2FnZSA9IEpTT04ucGFyc2UocmVzLm1lc3NhZ2UpO1xuXG4gIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJGaWxlUHJvbWlzZShcbiAgICB0ZW1wbGF0ZUZpbGVQYXRoLFxuICAgIE9iamVjdC5hc3NpZ24ocmVzLm1lc3NhZ2UsIHtcbiAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgcHJldHR5OiB0cnVlLFxuICAgICAgbW9tZW50XG4gICAgfSlcbiAgKTtcblxuICBjb25zdCBmaWxlUGF0aCA9IGAke29zLnRtcGRpcigpfS8ke2lkfS5odG1sYDtcbiAgYXdhaXQgd3JpdGVGaWxlKGZpbGVQYXRoLCBodG1sKTtcblxuICBpZiAob3BlbikgYXdhaXQgb3BuKGZpbGVQYXRoLCBvcHRpb25zKTtcblxuICByZXR1cm4gYGZpbGU6Ly8ke2ZpbGVQYXRofWA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByZXZpZXdFbWFpbDtcbiJdfQ==